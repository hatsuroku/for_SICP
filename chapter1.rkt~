#lang scheme

(define (square x) (* x x))
(define (cube x) (* x x x))

; 1.3
(define (big-two-sum a b c)
    (define sum (+ a b c))
    (max (- sum a) (- sum b) (- sum c)))

; 1.8
(define (cube-good-enough? guess x)
    (< (abs (- (cube guess) x)) 0.001))

(define (improve guess x)
    (/ (+ (/ x (square guess)) (* 2 guess)) 3))

(define (cube-root-iter guess x)
    (if (cube-good-enough? guess x)
        guess
        (cube-root-iter (improve guess x) x)))

(define (cube-root x)
    (cube-root-iter 1.0 x))

(define (for-each-in-range proc begin end)
    (if (= begin end)
        (void)
        ((lambda ()
            (proc begin)
            (for-each-in-range (+ begin 1) end)))))

;;; (define test
;;;     (for-each-in-range
;;;         (lambda (x) (writeln (cube (cube-root x))))
;;;         1
;;;         10))

; 1.16
(define (fast-expt b n)
    (cond [(= n 0) 1]))